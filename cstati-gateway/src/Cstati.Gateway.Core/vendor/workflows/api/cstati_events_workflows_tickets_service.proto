syntax = "proto3";

option go_package = "cstati-events-workflows-presentation-abstractions";

package Cstati.Events.Workflows.Presentation.Abstractions;

option csharp_namespace = "Cstati.Events.Workflows.Presentation.Abstractions";

import "vendor/workflows/contracts/cstati_events_workflows_common_contracts.proto";

service CstatiEventsWorkflowsTicketsService {
  rpc Create(CreateCstatiEventsWorkflowsTicketsCommand) returns (CreateCstatiEventsWorkflowsTicketsCommandResponse);
  rpc Delete(DeleteCstatiEventsWorkflowsTicketsCommand) returns (DeleteCstatiEventsWorkflowsTicketsCommandResponse);

  rpc GetAll(GetAllCstatiEventsWorkflowsTicketsQuery) returns (GetAllCstatiEventsWorkflowsTicketsQueryResponse);
}

// Requests

message CreateCstatiEventsWorkflowsTicketsCommand {
  string event_id = 1;
  int32 wave_ordinal = 2;
  CstatiEventWorkflowTicketTypeDto ticket_type = 3;
  double price = 4;
  string concurrency_token = 5;
}

message CreateCstatiEventsWorkflowsTicketsCommandResponse { }

message DeleteCstatiEventsWorkflowsTicketsCommand {
  string event_id = 1;
  int32 wave_ordinal = 2;
  CstatiEventWorkflowTicketTypeDto ticket_type = 3;
  string concurrency_token = 4;
}

message DeleteCstatiEventsWorkflowsTicketsCommandResponse { }

message GetAllCstatiEventsWorkflowsTicketsQuery {
  string event_id = 1;
  int32 wave_ordinal = 2;
}

message GetAllCstatiEventsWorkflowsTicketsQueryResponse {
  repeated GetAllCstatiEventsWorkflowsTicketsQueryResponseTicket tickets = 1;
  string concurrency_token = 2;
}

// Contracts

message GetAllCstatiEventsWorkflowsTicketsQueryResponseTicket {
  CstatiEventWorkflowTicketTypeDto type = 1;
  double price = 2;
}
